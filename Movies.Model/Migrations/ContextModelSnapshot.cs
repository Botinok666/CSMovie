// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movies.Model;

namespace Movies.Model.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854");

            modelBuilder.Entity("Movies.Model.Country", b =>
                {
                    b.Property<short>("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Movies.Model.Genre", b =>
                {
                    b.Property<short>("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("ID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Movies.Model.Movie", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("LocalizedTitle")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("PosterLink")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<float>("RatingIMDB");

                    b.Property<float>("RatingKP");

                    b.Property<short>("Runtime");

                    b.Property<string>("Storyline");

                    b.Property<string>("TagLine")
                        .IsRequired()
                        .HasMaxLength(511);

                    b.Property<short>("Year");

                    b.HasKey("ID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Movies.Model.MovieActor", b =>
                {
                    b.Property<int>("ID");

                    b.Property<int>("ActorId");

                    b.Property<int>("MovieId");

                    b.HasKey("ID");

                    b.HasIndex("ActorId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieActor");
                });

            modelBuilder.Entity("Movies.Model.MovieCountry", b =>
                {
                    b.Property<int>("ID");

                    b.Property<short>("CountryId");

                    b.Property<int>("MovieId");

                    b.HasKey("ID");

                    b.HasIndex("CountryId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieCountry");
                });

            modelBuilder.Entity("Movies.Model.MovieDirector", b =>
                {
                    b.Property<int>("ID");

                    b.Property<int>("DirectorId");

                    b.Property<int>("MovieId");

                    b.HasKey("ID");

                    b.HasIndex("DirectorId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieDirector");
                });

            modelBuilder.Entity("Movies.Model.MovieGenre", b =>
                {
                    b.Property<int>("ID");

                    b.Property<short>("GenreId");

                    b.Property<int>("MovieId");

                    b.HasKey("ID");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenre");
                });

            modelBuilder.Entity("Movies.Model.MovieScreenwriter", b =>
                {
                    b.Property<int>("ID");

                    b.Property<int>("MovieId");

                    b.Property<int>("ScreenwriterId");

                    b.HasKey("ID");

                    b.HasIndex("MovieId");

                    b.HasIndex("ScreenwriterId");

                    b.ToTable("MovieScreenwriter");
                });

            modelBuilder.Entity("Movies.Model.Person", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Movies.Model.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Pwd")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("Role");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Movies.Model.Viewing", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("MovieID");

                    b.Property<float>("Rating");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("MovieID");

                    b.HasIndex("UserID");

                    b.ToTable("Viewings");
                });

            modelBuilder.Entity("Movies.Model.MovieActor", b =>
                {
                    b.HasOne("Movies.Model.Person", "Actor")
                        .WithMany("Actors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movies.Model.Movie", "Movie")
                        .WithMany("Actors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movies.Model.MovieCountry", b =>
                {
                    b.HasOne("Movies.Model.Country", "Country")
                        .WithMany("Countries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movies.Model.Movie", "Movie")
                        .WithMany("Countries")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movies.Model.MovieDirector", b =>
                {
                    b.HasOne("Movies.Model.Person", "Director")
                        .WithMany("Directors")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movies.Model.Movie", "Movie")
                        .WithMany("Directors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movies.Model.MovieGenre", b =>
                {
                    b.HasOne("Movies.Model.Genre", "Genre")
                        .WithMany("Genres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movies.Model.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movies.Model.MovieScreenwriter", b =>
                {
                    b.HasOne("Movies.Model.Movie", "Movie")
                        .WithMany("Screenwriters")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movies.Model.Person", "Screenwriter")
                        .WithMany("Screenwriters")
                        .HasForeignKey("ScreenwriterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movies.Model.Viewing", b =>
                {
                    b.HasOne("Movies.Model.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movies.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
